# -*- coding: utf-8 -*-
"""Iris.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Snt5Vn7av2nT5BjqLIEkIvk5skSMPzx3
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

df = pd.read_csv('Iris.csv')
df.head()
df.tail()
df.info()
df.describe()
df.Species.value_counts()

plt.xlabel('Sepal Length (Cm)')
plt.ylabel('Sepal Width (Cm)')
plt.scatter(df['SepalLengthCm'],df['SepalWidthCm'])
plt.show()
sns.set_style('whitegrid')
sns.FacetGrid(df, hue = 'Species') \
 .map(plt.scatter, 'SepalLengthCm','SepalWidthCm') \
 .add_legend()
plt.show()
sns.pairplot(df.drop(['Id'],axis=1), hue='Species')
plt.show()
df['Sepal_diff'] = df['SepalLengthCm']-df['SepalWidthCm']
df['petal_diff'] = df['PetalLengthCm']-df['PetalWidthCm']
df

sns.set_style('whitegrid')
sns.FacetGrid(df,hue='Species').map(plt.scatter,'Sepal_diff','petal_diff').add_legend()
plt.show() 
import warnings
warnings.filterwarnings('ignore')
sns.set_style('whitegrid')
sns.FacetGrid(df,hue='Species').map(sns.distplot,'petal_diff').add_legend()
plt.show() 
df['Sepal_petal_len_diff'] = df['SepalLengthCm']-df['PetalLengthCm']
df['Sepal_petal_width_diff'] = df['SepalWidthCm']-df['PetalWidthCm']
df

sns.set_style('whitegrid')
sns.FacetGrid(df,hue='Species').map(plt.scatter,'Sepal_petal_len_diff','Sepal_petal_width_diff').add_legend
()
plt.show()
sns.set_style('whitegrid')
sns.FacetGrid(df,hue='Species').map(sns.distplot,'PetalLengthCm').add_legend()
plt.show()
df['Sepal_petal_len_wid_diff'] = df['SepalLengthCm']-df['PetalWidthCm']
df['Sepal_petal_wid_len_diff'] = df['SepalWidthCm']-df['PetalLengthCm']
df

sns.set_style('whitegrid')
sns.FacetGrid(df,hue='Species').map(plt.scatter,'Sepal_petal_wid_len_diff','Sepal_petal_len_wid_diff').add_legend()
plt.show()

df.drop(['Id'],axis=1,inplace=True)
for i in df.columns:
 if i == 'Species':
  continue
 sns.set_style('whitegrid')
 sns.FacetGrid(df,hue='Species').map(sns.distplot,i).add_legend()
 plt.show()
from sklearn import tree
import graphviz
from sklearn.tree import DecisionTreeClassifier
from sklearn.model_selection import train_test_split, cross_val_score
X = df[['SepalLengthCm', 'SepalWidthCm','PetalLengthCm', 'PetalWidthCm','Sepal_petal_wid_len_diff','Sepal_petal_width_diff']]
y = df['Species']
Xtrain, Xtest, Ytrain, Ytest = train_test_split(X, y, test_size=0.30, random_state=42)
Xt, Xcv, Yt, Ycv = train_test_split(Xtrain, Ytrain, test_size=0.10, random_state=42)
Iris_clf = DecisionTreeClassifier(criterion='gini',min_samples_split=2)
Iris_clf.fit(Xt, Yt)

tree.plot_tree(Iris_clf)
dot_data = tree.export_graphviz(Iris_clf, out_file=None)
graph = graphviz.Source(dot_data)
graph
print('Accuracy score is:',cross_val_score(Iris_clf, Xt, Yt, cv=3, scoring='accuracy').mean())
from sklearn.metrics import multilabel_confusion_matrix, accuracy_score
Y_hat = Iris_clf.predict(Xcv)
print('Accuracy score for validation test data is:',accuracy_score(Ycv, Y_hat))
multilabel_confusion_matrix(Ycv , Y_hat)
YT_hat = Iris_clf.predict(Xtest)
YT_hat
print('Model Accuracy Score on totally unseen data(Xtest) is:',accuracy_score(Ytest, YT_hat)*100,'%')
multilabel_confusion_matrix(Ytest , YT_hat)

Iris_Fclf = DecisionTreeClassifier(criterion='gini',min_samples_split=2)
Iris_Fclf.fit(Xtrain, Ytrain)
tree.plot_tree(Iris_Fclf)
dot_data = tree.export_graphviz(Iris_Fclf, out_file=None)
graph = graphviz.Source(dot_data)
graph
YT_Fhat = Iris_Fclf.predict(Xtest)
YT_Fhat
print('Model Accuracy Score on totally unseen data(Xtest) is:',accuracy_score(Ytest, YT_Fhat)*100,'%')
multilabel_confusion_matrix(Ytest , YT_Fhat)

Test_point = [[5.4,3.0,4.5,1.5,-1.5,1.5],
 [6.5,2.8,4.6,1.5,-1.8,1.3],
 [5.1,2.5,3.0,1.1,-0.5,1.4],
 [5.1,3.3,1.7,0.5,1.6,2.8],
 [6.0,2.7,5.1,1.6,-2.4,1.1],
 [6.0,2.2,5.0,1.5,-2.8,0.7]]
print(Iris_Fclf.predict(Test_point))